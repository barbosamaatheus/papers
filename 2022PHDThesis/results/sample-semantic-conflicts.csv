Project,Commit,Class,Method or Field Declaration,Locally Observable Interference,Locally Observable Interference Description,Left changes summay,Right changes summary,Associated Test case,,
https://github.com/Apache/Storm,ad2be678831b3b060229fd936e3908110162b7ac,org.apache.storm.kafka.spout.KafkaSpoutConfig,toString(),Yes,Left and Right change the same string that will be returned. This is equivalent to both developers assigning different values to the same variable. A test case should explore the string returned from merge scenario commit.,Left removes the field and reference for maxRetries of the returning string from the method toString(),"Right performs a refactoring involving the references for key and value variables. It updates how the variable values are accessed (now using get methods instead of directly accessing the values). Right also removes references to the field: kafkaSpoutStreams, tuplesBuilder, topics, and topicWildcardPattern. Finally, it adds reference for subscription and translator.",-,,
https://github.com/antlr/antlr4,69ff2669eec265e25721dbc27cb00f6c381d0b41,org.antlr.v4.codegen.target.Python2Target,python2Keywords,Yes,"Left and Right change the same array list, which means they change the size field. A test case should explore the array size in each merge scenario commit.",Left changes the list of values of an array of Strings during its initialization (adition of a new value),Right changes the list of values of an array of Strings during its initialization (adition of a new value),-,,
https://github.com/antlr/antlr4,69ff2669eec265e25721dbc27cb00f6c381d0b41,org.antlr.v4.codegen.target.Python3Target,python3Keywords,Yes,"Left and Right change the same array list, which means they change the size field. A test case should explore the array size in each merge scenario commit.",Left changes the list of values of an array of Strings during its initialization (adition of a new value),Right changes the list of values of an array of Strings during its initialization (adition of a new value),-,,
https://github.com/CloudSlang/cloud-slang,20bac30d9bd76569aa6a4fa1e8261c1a9b5e6f76,io.cloudslang.lang.api.SlangImpl,getAllEventTypes(),Yes,"Left and right add new values of a same list, which means they change the field size.",Left adds new values into a list,Right adds new values into a list,https://drive.google.com/open?id=1PhUNEVnuBgL1cg11Sw9_BnZNVLvmuR08,,
https://github.com/Apache/Storm,bd1f5c54752f67b484a83c26667331234234d3a3,org.apache.storm.kafka.spout.KafkaSpout,"emitTupleIfNotEmitted(ConsumerRecord<K,V>)",No,There is no locally observable interference as the Left changes do not impact the method return.,Left performs a refactoring extracting a variable of an IF statement.  it also changes another IF condition. ,Right updates the method signature changing its return type for boolean and adds return statements.,-,,
https://github.com/unclebob/fitnesse,4d9ba9d221d879507440feb084fa7521b95111ec,fitnesse.testsystems.slim.tables.SlimTableFactory,SlimTableFactory(),Yes,"Left and right change values of the same map, which means they change the size field.","Left adds two new elements into a map, by calling the add method addTableTye twice.","Right adds a new element into a map, also calling the method addTableType.",-,,
https://github.com/square/okhttp,35166168529bd27281685e56a0a122eff44460e9,com.squareup.okhttp.OkHttpClient,copyWithDefaults(),No,"There is no locally observable interference as Left and right change the object that will be returned by the method, but different attributes.",Left changed the object returned by the method using the current object of the class and ass a new value to the field transports.,Right changes the value assigned to result.hostnameverifier adding now an object OkHostnameVerifier.,-,,
https://github.com/jOOQ/jOOQ,d96120f327107feb1ebb15e7c090dc38eeff72ca,org.jooq.impl.DSL,"coalesce(T, T[])",No,"The specifications the changes are individually supposed to satisfy are not satisfied: the returned object by the method coalesce(T, T[]) has different state on left and right. It's not possible to create a test case as merge conflict happens.","added method declaration coalesce(T, T[])","also added method declaration coalesce(T, T[]), but with different body",-,,
https://github.com/kongchen/swagger-maven-plugin,e825a7fdc6ef688f1253b93d2cb236e710acfc56,com.github.kongchen.swagger.docgen.reader.AbstractReader,hasValidAnnotations(List<Annotation>),Yes,"Left and Right change the same array (right adds the same elements that left does, and also a new entry).",Left adds items to the returned list used to define the return of method hasValidAnnotations,Right also adds items to the returned list used to define the return of method hasValidAnnotations,https://drive.google.com/drive/folders/1Y2oEEFjk-AZtV5ynWTluKHDLrUC-TJ8i,,
https://github.com/square/retrofit,71f622ce51031b152a0be6ad5facfb27a654bf5a,retrofit.RequestBuilder,build(),Yes,The changes are conflicting as they change the same local variable used to create the returned object.,"Left changed the argument of a method call and chained it with another call. Semantically, it inserts ""?"" in the middle of a string stored in the url variable.",Right adds an if statement that surrounds an assignment (which comes from base) to the url variable.,https://drive.google.com/open?id=1CxypKZDUNmBovFmYQC_l0DQ77zvU6RwI,,
https://github.com/richardwilly98/elasticsearch-river-mongodb,3d4f99516ba3177f7d88a1f600923138a8b77cc8,org.elasticsearch.river.mongodb.Slurper,assignCollections(),Yes,"There is a locally observable interference as one parent sets the attribute's value (oplogRefsCollection) using another attribute, which was modified by the other parent (oplogDb). ",Left adds some if statements and changed the values of two variables: adminDb and oplogDb.,Right changes the value of oplogRefsCollection by calling a method of oplogDb ,-,,
https://github.com/jhy/jsoup,a8b6982de98ff76ef254031d7152fff57f6bf941,org.jsoup.helper.HttpConnection,"execute(Connection.Request, Response)",Yes,"The parent changes are related; while Right changes a parameter, Left changes a local variable.","Left changes the value assigned to the local variable bodyStream, and also removes the local variable dataStream. The object bodyStream uses the object conn, that is created based on req (changed by Right).",Right adds a new verification before calling some methods of the parameter req.,-,,
https://github.com/jhy/jsoup,3f7d2c71dbbbb289c684f339874eed8ac2747fa0,org.jsoup.helper.HttpConnection,"execute(Connection.Request, Response)",Yes,"There is a locally observable interference as an unexpected behavior is caused by the control flow. Based on the changes, different excpetions ca be thrown during the execution.",Left adds a new condition (OR) that is reponsible for changing the value of the local variable needsRedirect.,"Right updates another if statement conditions; it changes a set of conditions grouped with AND, to the OR operator. This if is responsible for throw a new exception.",-,,
https://github.com/jhy/jsoup,a44e18aa3c1fcd25a68a5965f9490d8f7d026509,org.jsoup.nodes.TextNode,"outerHtmlHead(StringBuilder, int, Document.OutputSettings)",Yes,"The changes can be conflicting as the left contributions changes the conditional that updates the value of HTML variable, while right changes the value of accum. In the end, both changes are grouped in the parameter accum. ","Left changes the condition of an if statement, which calls the method preserveWhitespace. Now the method only performs its verifications if the node is not null and is an instance of Element type; otherwise, no action is performed and the value of local variable html is not updated.","Right adds a new condition (OR) in an if statement, which may change the value of the parameter accum.",https://drive.google.com/open?id=14pjTDu1wdpYOLD_lgDHX4j8agbr0G_Hx,,
https://github.com/Netflix/SimianArmy,345ad9513aafff397050d613fa87ad06ddffe99d,com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext,getInstanceJanitor(),No,"There is no locally observable interference as Left just updates the rule already added in base commit, while Right adds a new one.",Left updates the rule added in ruleEngine by method addRule().,"Right adds a new if statement, which may also add a new rule in ruleEngine.",-,,
https://github.com/thinkaurelius/titan,387c16ea05ef9fa312f37139228d2bbf61455ff4,com.thinkaurelius.titan.graphdb.database.serialize.SerializerInitialization,initialize(Serializer),No,There is no locally observable interference as the individual contributions change different objects (both change the field size of different arrays).,"Left adds and removes calls for method registerClass of serialize object, that registers new classes in the registrations hashmap.","Right changes one call for method registerClass by adding a new parameter (instead of only two), and this new parameter will be added into headers hashmap.",-,,
https://github.com/elastic/elasticsearch,59cb67c7bd0ab6311115b20954e013412b676b29,org.elasticsearch.index.query.support.NestedInnerQueryParseSupport,setPathLevel(),No,"There is no locally observable interference as the Left contributions are refactorings, and only Right changes the program behavior.","Left adds a new field, and use it to assign values for fields parentFilter and parentObjectMapper; it has the same behavior when compared to base commit.",Right changes the value assigned to childFilter,-,,
https://github.com/Activiti/Activiti,50d8e43eb5917c63abfbcdec1e68e510943f325a,org.activiti.engine.impl.persistence.entity.DeploymentEntityManager,"deleteDeployment(String, boolean)",Yes,"There is a locally observable interference as the new routine will be only executed in case an if condition is satisfied; this condition requires the use of nrOfProcessDefinitionsWithSameKey, that was changed by Left.","Left changes a if condition, that is reponsible for changing the value of the local variable nrOfProcessDefinitionsWithSameKey (incrementation)","Right adds a new IF statement; in case the condition is TRUE, it calls new mtethod using the objects of the local list timerStartJobs.",-,,
https://github.com/metamx/druid,05168808c278c080c59c19e858d9471b316cd1f5,com.metamx.druid.loading.S3SegmentPusher,"push(File, DataSegment)",No,"There is no locally observable interference as the contributions change different objects, and these changes are not accessed by each other.",Left changes the object that will be returned by setting the object field binaryVersion.,"Right set the field acl on object toPush, which is used by the returned object.",-,,
https://github.com/netty/netty,193acdb36cd3da9bfc62dd69c4208dff3f0a2b1b,org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder,"decode(ChannelHandlerContext, Channel, ChannelBuffer)",Yes,There is a locally observable interference as the changes performed by right will only be executed in some cases because of the change performed by Left.,"Left updates how variable frameLength is incremented, which is done only if the new conditional in the if statement is true.",Right updates method call failIfNecessary adding a new parameter (boolean value). [But these changes were also done by Left.],https://drive.google.com/drive/folders/1ah79B76M7PN3f8eaSm21t28WTlxBTuwt,,
https://github.com/opentripplanner/OpenTripPlanner,4c506dce43775704919d084f0acfba86d251bf4a,org.opentripplanner.routing.spt.MultiShortestPathTree,"dominates(State, State)",Yes,"There is a locally observable interference as the new if statement added by right checks an action, which if true returns false. As these modifications are placed before the changes introduced by Left, these last contributions could not be executed under the new circumstances. So the method result may present different return values.",Left renames some local variables and updates three boolean local variables used to define the method return.,"Right adds a new if statement, which may return false.",https://drive.google.com/drive/folders/1aM2K-S2aLAsgDE0khaX_hUdzdGewrmO9,,
https://github.com/webbit/webbit,74d2d2b87704d003acacb34e4ca8fb5f897b938f,org.webbitserver.netty.WebSocketClient,"adjustPipelineToWebSocket(ChannelHandlerContext, MessageEvent, ChannelHandler, ChannelHandler)",No,There is no locally observable interference as one of the contributions is a refactoring.,Left sets the version of webSockectConnection object calling the method setHybiWebSocketVersion.,Right changes the order of parameters used to create the local variable webSocketChannelHandler,-,,
https://github.com/spring-projects/spring-boot,ea8107b6a53fa60b5f23b33e1b6d2e88bb60133c,org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory,createDeploymentManager(ServletContextInitializer),No,There is no locally observable interference as the changes performed by Right still return an object with same behavior when compared to base.,"Left sets one attribute of object deployment, which is used to create the returned method object manager.","Right modifies the way the returned manager object is created; before, it was done by calling the method defaultContainer from Servlets, and now it’s done by calling the method newContainer.",-,,
https://github.com/spring-projects/spring-boot,af20dc6cc45c032573413c401f9f73aa75371744,org.springframework.boot.loader.archive.ExplodedArchive,getUrl(),No,There is no locally observable interference based on the parent contributions. Left and Right just change different fields of the object returned by the method.,"Left removes one parameter (handler) for the new URL object, that is returned by the method.","Right updates one parameter used to create the URL object that is returned by the method, by calling toURL()",-,,
https://github.com/Netflix/eureka,6b09030e95e118a784ca7ec616398a4f0e384bcd,com.netflix.appinfo.ApplicationInfoManager,ApplicationInfoManager(),No,"There is no locally observable interference here as the parent contributions change the method interface, but not its behavior.","Left adds a new attribute, and also its initialization in the constructor.",Right changes the contructor access modifier to public.,-,,
https://github.com/atmosphere/atmosphere,ffc0c6e274094c6423e29d1c45bab1593b8fac7d,org.atmosphere.cpr.AtmosphereConfig,AtmosphereConfig(),No,"There is no locally observable interference here as the parent contributions change the method interface, but not its behavior.",Left changes the contructor access modifier to protected.,"Right adds a new attribute, and also its initialization in the constructor.",-,,
https://github.com/elastic/elasticsearch,f3d63095dbcc985e24162fbac4ee0d6914dc757d,org.elasticsearch.index.analysis.synonyms.SynonymsAnalysisTest,testSynonymsAnalysis(),No,There is no locally observable interference as Right just does a refactoring.,"Left extracts a local variable home of the parameter used on method put. Now, it's used the return of createTempDir instead of createTempDir().toString();","Right extracts a local variable json from the parameter sent to method loadFromStream. It also replaced the method call loadFromClasspath to loadFromStream, which is done by the method return object of settingsBuilder.",-,,
https://github.com/elastic/elasticsearch,36884807b3cc9d660db4da062275c7fdbec8ba67,org.elasticsearch.index.query.SimpleIndexQueryParserTests,setup(),No,"There is no locally observable interference as the contributions change differnt obejcts, which do not interfere with each other.",Left set the fields type and id on the local variable doc.,Right adds a new entry on the local obecjt settings.,-,,
https://github.com/resty-gwt/resty-gwt,867b917c43c32acbdcac55767e7f04334006c866,org.fusesource.restygwt.rebind.DirectRestServiceInterfaceClassCreator,getMethodCallback(JMethod),Yes,"The changes are individually supposed to satisfy are not satisfied: left changes method's expected result by right. Suppose a test that receives an ""Overlay"" method returning a primitive type (int, for instance). The test then checks if result type's is ""OverlayCallback"". The test fails on base, passes on right, and fails on the merged version.","changed if statement (condition, and block) on method getMethodCallback(JMethod)",extracted variable refactoring and added if statement on method getMethodCallback(JMethod),https://drive.google.com/drive/folders/1w59lKwGxYDZYGviigv7ihXipupGAlxz3,,
https://github.com/jhy/jsoup,fee4762322f85a1109edd75ccb67f38cf5008c80,org.jsoup.helper.HttpConnection,createConnection(Connection.Request),No,"There is no locally observable interference as contributions different fields of the same object, with no dependency between the fields in the analyzed method","Left adds a IF statement, allowing extra set fields of the object returned by the method","Rights changes a IF condition, setting more fields of the object returned by the method and accepting more values than before",-,,
https://github.com/square/retrofit,2b6c719c6645f8e48dca6d0047c752069d321bc4,retrofit.RestAdapter,"logAndReplaceResponse(String, Response, long)",No,There is no locally observable interference as Left changes are refactorings,Left does a refactoring.,Right creates a new method toString() and uses it to write on log.,-,,
https://github.com/square/retrofit,2b6c719c6645f8e48dca6d0047c752069d321bc4,retrofit.RestAdapter,logAndReplaceRequest(Request),No,There is no locally observable interference as Left changes are refactorings,Left does a refactoring.,Right creates a new method toString() and uses it to write on log.,-,,
https://github.com/Activiti/Activiti,bf46684ba62f5883673ea8fb0a14aecfe0aedea2,org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior,execute(ActivityExecution),No,"There is no locally observable interference as the Right changes do not trhows any exception, otherwise it could represent an interference with Left changes.","Left adds a new IF statement, which may set the field formKey of the local variable formKey, or throws an exception.","Right adds a new IF statement, which may call static external methods without using their returns.",-,,
https://github.com/square/okhttp,1151c9853ccc3c9c3211c613b9b845b925f8c6a6,com.squareup.okhttp.internal.bytes.GzipSource,consumeHeader(Deadline),No,There is no locally observable interference as both contributions are refactorings.,Left does a refactoring by renaming the method getByte on OkBuffer class.,Right does a refactoring by extracting the local method seek to OkBuffers class.,-,,
https://github.com/brettwooldridge/HikariCP,1bca94af9ec625f21d1b58ff10efb5be71ab87a6,com.zaxxer.hikari.HikariConfig,validate(),Yes,There is a locally observable interference as both contributions write on local variable logger.,"Left adds a new IF statement, which may write in logger calling method info","Right removes source code, which would write in logger calling method error or wanr, or even trhows an exception. Changes on formating",-,,
https://github.com/sanity/quickml,bae968d9a85c0501ba8842a6f88e7fc2c6b78693,quickdt.experiments.OutOfTimeCrossValidatorRunner,"getRandomForestBuilder(int, int)",No,There is no locally observable interferences as the changes are not related.,"Left deletes a method call, which set the field maxDepth.","Right renames a local variable RandomForestBuilder, and replaces the method return for that local variable. This variable has a different type related to the method return type on Base commit, but the interface is still the superclass.",-,,
https://github.com/jchambers/pushy,58901c846e4f0874977c5aabbc34bcb4de3670e0,com.relayrides.pushy.apns.PushManager,handleConnectionClosure(ApnsConnection<T>),No,"There is no locally observable interference as Right changes are only refactorings, and only Left changes might impact behavior",Left replaces “new Thread” with “listenerExecutor”,"Right does a refactoring by “extracting"" two local methods.",-,,
https://github.com/DiUS/java-faker,ca42fcfaf45cae1754c58e02e1d5d2a58ec03561,com.github.javafaker.Faker,"Faker(Locale, Random)",No,There is no locally observable interference as the contributions change different fields.,Left adds an initialization of two fields on constructor.,Right changes the initialization of a different field.,-,,
https://github.com/swagger-api/swagger-core,e7fea7c4889dbdd6a4e0b2d059c8aa0f126ab1c2,io.swagger.jaxrs2.OperationParser,getSchemaFromAnnotation(io.swagger.oas.annotations.media.Schema),No,"There is no locally observable interference as Right changes are refactorings, and only Left changes modify the program behavior.","Left adds two IF statements, which may set some fields on object schemaObject.","Right renames three methods _enum() to allowableValues(), and _default() to defaultValue",-,,
https://github.com/cucumber/cucumber-jvm,4505c156b6267c1b760deec570ddbfe047b42aa9,cuke4duke.internal.java.JavaLanguage,load(String),No,There is no locally observable interference as the Right changes do not represent a bahvior change.,"Left adds a new IF statement, which may restrict the new addition of the local variable clazz on the field objectFactory.",Right changes generics allowing any type for the local variable clazz.,-,,
https://github.com/elastic/elasticsearch,59cb67c7bd0ab6311115b20954e013412b676b29,org.elasticsearch.index.query.MultiMatchQueryBuilder,doXContent(org.elasticsearch.common.xcontent.XContentBuilder| org.elasticsearch.common.xcontent.ToXContent$Params),Yes,"There is locally observable interference. Creating an XContentBuilder builder object, passing the queryName and boost attributes as null, throws an exception on left and passes it on right.","Changed the parameter sent to the startObject method but the value of the parameter remained the same; Removed two if conditions that made calls to the field method by passing (""boost"", boost) and (""_name"", queryName). Added a call to the printBoostAndQueryName method passing the builder object as a parameter.",Removed an if condition (rewrite! = Null) that used the field method of the builder object,-,,
https://github.com/elastic/elasticsearch,f3d63095dbcc985e24162fbac4ee0d6914dc757d,org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests,testQueryModeCommonGramsAnalysis(),No,There is no locally observable interference. Right did a refactoring: extract variable.,Replaced the call to the createTempDir().toString() method with createHome(),Added a variable called Json containing a String with the path to the file commongrams_query_mode.json, Replaced the loadFromClasspath method with loadFromStream,,-
https://github.com/elastic/elasticsearch,f3d63095dbcc985e24162fbac4ee0d6914dc757d,org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests,testCommonGramsAnalysis(),No,There is no locally observable interference. Right did a refactoring: extract variable.,"Left changed the local settings variable with a call to put() method in settingsBuilder(), which uses the local variable called ""json"" changed by right.",Right changed the local variable json. Changed the local varibale called settings with a call to loadFromStream() method in settingsBuilder(),-,,
https://github.com/elastic/elasticsearch,f3d63095dbcc985e24162fbac4ee0d6914dc757d,org.elasticsearch.index.analysis.KuromojiAnalysisTests,createAnalysisService(),No,There is no locally observable interference. Right did a refactoring: extract variable.,"Left changed the local settings variable with a call to put() method in settingsBuilder(), which uses the local variable called ""json"" changed by right. Changed other local variables: empty_dict, dict, home, config and Files, not used by right. ",Right changed the local variable json. Changed the local varibale called settings with a call to loadFromStream() method in settingsBuilder(),-,,
https://github.com/unclebob/fitnesse,4d9ba9d221d879507440feb084fa7521b95111ec,fitnesse.testsystems.slim.tables.SlimTableFactoryTest,setUp(),Yes,The interference occurs because both parents change the field size of map. A test case assert should explore the map size.,Left adds two entries on the field map.,Right adds one entry on the field map.,-,,
https://github.com/brettwooldridge/HikariCP,1bca94af9ec625f21d1b58ff10efb5be71ab87a6,com.zaxxer.hikari.HikariPool,addConnection(),Yes,So both parents may change the value of totalConnections,Left: changes if condition that decrement totalGetCOnnection,Right: adds a new call to addConnection from addConnections,-,,
https://github.com/jchambers/pushy,58901c846e4f0874977c5aabbc34bcb4de3670e0,com.relayrides.pushy.apns.PushManager,handleConnectionFailure(com.relayrides.pushy.apns.ApnsConnection<T>| java.lang.Throwable),No,There is no locally observable interference as the Right changes are structural refactorings.,Left changes the way a new thread is created.,Right does a structural refactoring by extracting two methods.,-,,
https://github.com/ReactiveX/RxJava,1c47b0cb26e6d971eefa42ebb3479099236b0125,rx.concurrency.TestScheduler,triggerActions(long),No,"While Left changes the final value assigned to field time, Right restricts an external method call, which doesn't involve the field time. So there is no locally observable interference.",Left moves the value assignment of the field time from the first IF declaration to the end of the method declaration.,"Right adds a new IF declaration. Now, an external method call is done only if current TimedAction object is not canceled.",-,,
https://github.com/libgdx/libgdx,da27e2dae56be0a159e82231e5c3a5b83b099063,com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application,newWindow(com.badlogic.gdx.ApplicationListener| com.badlogic.gdx.backends.lwjgl3.Lwjgl3WindowConfiguration),No,"Changes are made to different attributes of an object that do not interfere with each other. The changes generate different visual effects in the GUI, which can cause a globally observed difference. However, we are only interested in local interference.",Left changes four attributes of an object using a set method,Right uses a set method to change the value of an object's attribute,-,,
https://github.com/libgdx/libgdx,da27e2dae56be0a159e82231e5c3a5b83b099063,com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration,copy(com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration),No,The changes of the different branches are in different attributes of the object that do not interfere with each other,Left assigns new values ​​from the method parameter to four different attributes of the object.,Right assigns a new value from the method parameter to an attribute of the object.,-,,
https://github.com/elastic/elasticsearch,3764b3ff800c94293aba0bb0fa18c7df80a764f7,org.elasticsearch.rest.action.cat.RestNodesAction,getTableWithHeader(org.elasticsearch.rest.RestRequest),No,"Because right only modifies an existing element of the List and lefts removes some elements of the array that are after rights changes, they don't interfere with the same state elements",Removed calls to a method that modifies the table object,Changed parameters passed to a method that modifies the table object,-,,
https://github.com/elastic/elasticsearch,3764b3ff800c94293aba0bb0fa18c7df80a764f7,org.elasticsearch.rest.action.cat.RestIndicesAction,getTableWithHeader(org.elasticsearch.rest.RestRequest),No,"Because right only modifies an existing element of the List and lefts removes some elements of the array that are after rights changes, they don't interfere with the same state elements (same as previous)",Removed calls to a method that modifies the table object,Changed parameters passed to a method that modifies the table object,-,,
https://github.com/elastic/elasticsearch,3764b3ff800c94293aba0bb0fa18c7df80a764f7,org.elasticsearch.rest.action.cat.RestShardsAction,getTableWithHeader(org.elasticsearch.rest.RestRequest),No,"Because right only modifies an existing element of the List and lefts removes some elements of the array that are after rights changes, they don't interfere with the same state elements (same as previous)",Removed calls to a method that modifies the table object,Changed parameters passed to a method that modifies the table object,-,,
https://github.com/spring-projects/spring-boot,6664ce19d6f2388ebd6cf54763f54fdddd226b9a,org.springframework.boot.jta.atomikos.AtomikosProperties,asProperties(),Yes,"Left and Right changes the same field count in class Hashtable. A test case should call the method asProperties, and check the value assigned to this field. For example, assertEquals(x, properties.count). This field count might be got by other methods like properties.stringPropertyNames().size().","Left adds calls for method set, which adds values on the object properties.","Right removes calls for method set, which added values on the object properties.",-,,
https://github.com/spring-projects/spring-boot,6664ce19d6f2388ebd6cf54763f54fdddd226b9a,org.springframework.boot.jta.atomikos.AtomikosPropertiesTests,testProperties(),Yes,"Left and Right modify the elements of the object properties. Merge conflicts happen, but the integrator consider all parent contributions. However, this test case would detect a conflict by using one of the parent expected number of properties in the first assertion.","Left sets five new properties of the object properties (field), and consequently updates the expected value of first assertion.","Right removes five properties of the object properties (field), and consequently updates the expected value of first assertion.",-,,
https://github.com/spring-projects/spring-boot,6664ce19d6f2388ebd6cf54763f54fdddd226b9a,org.springframework.boot.jta.atomikos.AtomikosPropertiesTests,testDefaultProperties(),Yes,"Left changed the number of attributes of the testing and right created a test with the size of the attributes in class MapEntry. An exception can occur if left tries to access attributes of right., because right removed some parameter.","Added some attributes for a test, changing the quantity of the parameters and the key.length() attribute.","Removed some attributes for a test, changing the quantity of the parameters and the key.length() attribute.",-,,
https://github.com/spring-projects/spring-boot,2d4e68a9777601bfb8309c94d8b74bc21be80ad1,org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory,customizeConnector(org.apache.catalina.connector.Connector),No,The change in right appears to be a refactoring. Its move has no direct impact on any state element.,Added an if condition that has an asset in its body. One method call to configureSsl and two set method calls to connector,Added a wildcard to the generic of the AbstractProtocol class which is used as a casting,-,,
https://github.com/spring-projects/spring-boot,3444ebbc05b99a164474c14d6a6784f749514428,org.springframework.boot.context.web.SpringBootServletInitializer,createRootApplicationContext(javax.servlet.ServletContext),No,"Changes were made to different statements with a structural refactoring.. Left modified the creation of the instance of other class (called a method that has the command ""new"") and right inserted a conditional for an attribute of the current class. They do not interfere with the same state elements.","Modified a class's instance declaration, instead of using new Class(), called a method that does this.","Inserted a conditional (if) for an attribute that has not been changed from the left, checking if an attribute of the class is true or false.",-,,
https://github.com/spring-projects/spring-boot,958a0a45f164601d01cb706c19f22ed3e25eff56,org.springframework.boot.autoconfigure.mongo.MongoProperties,builder(com.mongodb.MongoClientOptions),No,"Modifications were made to different attributes, using set methods, they don't interfere with the same state elements",Left changes one attribute of an object using a set method,Right changes nine attributes of an object using a set method,-,,
https://github.com/spring-projects/spring-boot,fdd3f12ee0f92ac18844c08bf71df39feebb6673,org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer,logAutoConfigurationReport(boolean),Yes,"The changes are in methods that determine the levels of the logs, both interfere in the output. A test case can be made by creating an assert to check the output produced by comparing the string produced by the left and right log, will be different.",Change the string sent as a parameter to the logger.debug method,Change the string sent as a parameter to the logger.info method,-,,
https://github.com/spring-projects/spring-boot,af20dc6cc45c032573413c401f9f73aa75371744,org.springframework.boot.loader.archive.ExplodedArchiveTests,getUrl(),No,Right did inline variable refactoring and left change the method equalsTo() to isEqualsTo(). The integrator merged both modifications.,Equals to the base class,Changed a test assert,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.common.settings.IndexScopedSettings,BUILT_IN_INDEX_SETTINGS,Yes,"Both changed the same attribute initialization, in this case, both changing the Set size Test that fails in base, passes in left and fails in merge: settings = IndexScopedSettings.BUILT_IN_INDEX_SETTINGS; assert(settings.size(), 82);",Added two elements to a set is a static attribute named BUILT_IN_INDEX_SETTINGS initialization,Added one element to a set is a static attribute named BUILT_IN_INDEX_SETTINGS initialization,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.index.TransportIndexAction,executeIndexRequestOnPrimary(org.elasticsearch.action.index.IndexRequest| org.elasticsearch.index.shard.IndexShard| org.elasticsearch.cluster.action.index.MappingUpdatedAction),No,Right changes were a extract variable refactoring,"Added a call to a set method ""seqNo"", and passed the value as a parameter to the IndexResponse constructor",Extract variable on the object created by the IndexResponse constructor,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.support.replication.ReplicationOperationTests,testReplication(),No,"There is no locally observable interference, because was used different state elements. Right has a listener of type TestPrimary.Result and left of type Response.",Extracted a variable from constructor TestReplicationOperation creating a TestPrimary object (Refactor) and added two assertThat method calls on the end of the method,"Changed the generic used at the PlainActionFuture type on the listener variable and Changed the type of shardInfo to import directly the inner ShartInfo, instead as accessing it from its outer class ",-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.index.IndexSettings,IndexSettings(org.elasticsearch.cluster.metadata.IndexMetaData| org.elasticsearch.common.settings.Settings| java.util.function.Predicate| org.elasticsearch.common.settings.IndexScopedSettings),No,"Both a change different state elements, left changes only the globalCheckpointInterval field, and right changes the maxRefreshListeners and a field on the scopedSettings different than the one used in left ",Added the initialization to the globalCheckPointInterval field getting from scopedSettings map ,Added the initialization to the maxRefreshListeners field getting from scopedSettings map and added a call to addSettingsUpdateConsumer for the key that got the maxRefreshListeners,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.bulk.TransportShardBulkAction,update(org.elasticsearch.cluster.metadata.IndexMetaData| org.elasticsearch.action.bulk.BulkShardRequest| org.elasticsearch.index.shard.IndexShard| long[]| org.elasticsearch.index.VersionType| org.elasticsearch.index.translog.Translog$Location| int| org.elasticsearch.action.bulk.BulkItemRequest),No,"There is no locally observable interference, because right renames one called method and changes one attribute to access via getter instead of direcly reading it ",Added the parameter seqNo to both calls of the UpdateResopnse constructor ,Added a SupressWarning annotation twice and refactored the WriteResult class to return its parameters via getResponse and getLocation (Refactor),-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.support.replication.TransportReplicationAction,doRun(),Yes,"Considering the changes performed by the integrator, it adds a parameter on the method call result.response. There is no interference, DF, CF, OA based on the parent contributions. In the base commit, there is write on the log object; in the right commit, no write is performed; in the merge commit, an exception can be thrown on class IndexShard.acquireReplicaOperationLock because of the changes from integrator.","Left creates a new local variable, and assigns a value to it depending on a try, which was also changed by Left.","Right adds a new local variable and assings a value to it inside a try, which was chaged by Left.",-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.support.replication.ReplicationOperation,execute(),No,"There is no locally observable interference as the new method calls added by Right just reads the value of replicaRequest (PrimaryRequest class), while the Left changes adds a message on the logger (GlobalCheckPointService class).","Left creates a new local variable primaryRounting, while it also adds a new call for updateLocalCheckpointForShard on the field primary.",Right creates a new local variable primaryRounting and renames the local variable primaryId. It also adds a new call for replicaRequest on the field primaryResult.,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.index.engine.InternalEngineTests,testRecoverFromForeignTranslog(),No,There is no locally observable interference as the parent changes only updates method calls for creating different objects.,"Left updates the method call for creating a new Index object. Now, it is also assigned a value for field seqNo.","Right updates the method call for creating a new EngineConfig object. Now, it is also assigned a value for field refreshListeners.",-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.index.engine.InternalEngine,InternalEngine(org.elasticsearch.index.engine.EngineConfig),No,There ir no locally observable interference as the parent changes only reads different fields of the object engineConfig.,"Left adds a new field in the class, and also assigns a value for it in the constructor.","Right adds a new IF statement, which whether a property on the object engineConfig is nulll.",-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.DocWriteResponse,writeTo(org.elasticsearch.common.io.stream.StreamOutput),Yes,"When a new byte is added on a matrix of bytes (BigByteArray class), the field count is incremented by 1 (BytesStreamOutput class). As both parent contributions add a new call for adding a new byte, both changes the vaue of count. A test case could call method writeTo sending as parameter an object of type BytesStreamOutput. After the method execution, an assertion should check the value assigned to the field count. Consider that in base commit, count would have value X, in left commit value X+1, and in merge commit value X+2. (assertEquals(x+1, out.position())",Left adds a call for method writeZLong on the out object sending a long value.,Right adds a call for method writeBoolean on the object out sending a boolean value.,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.DocWriteResponse,readFrom(org.elasticsearch.common.io.stream.StreamInput),No,Left and Right changes just added new method calls that returns the byte at the buffer's current position.,Left adds a call for method readZLong on the in object.,Right adds a call for method readBoolean on the object in.,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.DocWriteResponse,toXContent(org.elasticsearch.common.xcontent.XContentBuilder| org.elasticsearch.common.xcontent.ToXContent$Params),Yes,"Left and Right add different objects in the generator field on class JsonXContentGenerator. In the class WriterBasedJsonGenerator, there is an implementation of method writeFieldName, that increment the value of _outputTail. A test case should explore this field, after writing a new String by calling method field. assertEquals(X, xcontentBuilder._outputTail).",Left adds two calls for method field on the object builder.,Right adds a call for method field on the object builder.,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.cluster.metadata.MetaDataCreateIndexService,createIndex(org.elasticsearch.action.admin.indices.create.CreateIndexClusterStateUpdateRequest| org.elasticsearch.action.ActionListener<ClusterStateUpdateResponse>),No,"There is no locally observable interference as the Left changes just add parameters to create a local variable, which does not interfere with the new changes of Right.",Left adds two new parameters when creating the local variable indexService.,Right extracts a local variable (refactoring) and also adds a new local variable routingNumShards.,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.update.TransportUpdateAction,shardOperation(org.elasticsearch.action.update.UpdateRequest| org.elasticsearch.action.ActionListener| int),No,"There is no locally observable interference as even the changes overriding the same object, they do not interfere with each other.",Left adds new parameters when creating the local variable update.,Right sets the field forcedRefresh of the local variable update,-,,
https://github.com/elastic/elasticsearch,d896886973660785aac45275ddb110c1a6babc57,org.elasticsearch.action.delete.TransportDeleteAction,executeDeleteRequestOnPrimary(org.elasticsearch.action.delete.DeleteRequest| org.elasticsearch.index.shard.IndexShard),No,"There is no local interference as Right performs a refactoring, while Left only sets an atribute on the object request (parameter).","Left sets the field seqNo on object request, and added this value on the call to create the returned object DeleteResponse.","Right does a refactoring by extracting a variable, and them call the method to create the method return object.",-,,
https://github.com/richardwilly98/elasticsearch-river-mongodb,6b6ce8e851c6613213c4508c3f277a80649e0c7b,org.elasticsearch.river.mongodb.MongoDBRiverDefinition,parseSettings(String| String| org.elasticsearch.river.RiverSettings| org.elasticsearch.script.ScriptService),No,There is no local observable interference as the Left changes just update a local variable while Right writes on the logger.,"Left changes the local object builder, which is used as the returning object.",Right replaces the method used to write in the object logger.,-,,
https://github.com/richardwilly98/elasticsearch-river-mongodb,6b6ce8e851c6613213c4508c3f277a80649e0c7b,org.elasticsearch.river.mongodb.Indexer,applyAdvancedTransformation(org.elasticsearch.river.mongodb.MongoDBRiver$QueueEntry| String),No,There is no local observable interference as the Left changes just update a local variable while Right writes on the logger.,"Left changes the local object builder, which is used as the returning object.",Right replaces the method used to write in the object logger.,-,,
https://github.com/richardwilly98/elasticsearch-river-mongodb,6b6ce8e851c6613213c4508c3f277a80649e0c7b,org.elasticsearch.river.mongodb.Indexer,processBlockingQueue(org.elasticsearch.river.mongodb.MongoDBRiver$QueueEntry),No,There is no local observable interference as the Left changes just update a local variable while Right writes on the logger.,Left adds a new parameter used to create the local object executableScript.,Right replaces the method used to write in the object logger and the value assigned to the local object ctx.,-,,
https://github.com/richardwilly98/elasticsearch-river-mongodb,6b6ce8e851c6613213c4508c3f277a80649e0c7b,org.elasticsearch.river.mongodb.Slurper,run(),No,"There is no local observable interference as the Left changes might change the value assigned to local variable startTimeStamp, while Right writes on the logger.","Left adds a if statement, restricting the value assigned to startTimestamp to be increased.",Right replaces the method used to write in the object logger.,-,,
https://github.com/richardwilly98/elasticsearch-river-mongodb,6b6ce8e851c6613213c4508c3f277a80649e0c7b,org.elasticsearch.river.mongodb.Slurper,addToStream(org.elasticsearch.river.mongodb.Operation| org.elasticsearch.river.mongodb.Timestamp<?>| com.mongodb.DBObject| String),Yes,There is a locally observable interference as both parents write in the object logger.,Left writes in the object logger.,Right writes in the object logger.,-,,
https://github.com/hector-client/hector,0588608e7a2bdf974c985ff546207104f672bf6c,me.prettyprint.cassandra.connection.client.HSaslThriftClient,open(),No,There is no locally observable interference as Left changes are refactorings.,Left does a refactoring regarding the value assigned to the local variable socket and adding a parameter when creating the object transport,"Right remove a If statement, which changed the value assigned to transport",-,,
https://github.com/hector-client/hector,a33a46506656a39d1b0f7780973905665d3b6145,me.prettyprint.cassandra.connection.client.HKerberosThriftClient,open(),No,There is no locally observable interference as Left changes are refactorings.,Left does a refactoring regarding the value assigned to the local variable socket,"Right remove a If statement, which changed the value assigned to transport",-,,
https://github.com/hector-client/hector,a33a46506656a39d1b0f7780973905665d3b6145,me.prettyprint.cassandra.connection.client.HThriftClient,open(),No,There is no locally observable interference as Left changes are refactorings.,Left does a refactoring regarding the value assigned to the local variable socket and adding a parameter when creating the object transport,"Right remove a If statement, which changed the value assigned to transport",-,,
https://github.com/hector-client/hector,213f7887ea70eabdf0705cf8454de29af89e8c38,me.prettyprint.cassandra.connection.HconnectionManager,operateWithFailover(me.prettyprint.cassandra.service.Operation),No,"There is no locally observable interference as Left changes the method used to write in the looger, while Right changes the initialization of the local variable stopWatch.",Left changes the method used to write in the logger.,Right changes the initialization of the local variable stopWatch,-,,
